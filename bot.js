const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs'); // –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
require('dotenv').config();
const db = require('./db');

// –ú–æ–¥–µ–ª–∏
const {
  getAllSpecialists, insertSpecialist
} = require('./models/specialists');
const {
  getServicesBySpecialist, addService, updateService
} = require('./models/services');
const {
  getAvailableSlotsBySpecialist, addSlot, updateSlot, deleteSlot
} = require('./models/slots');
const {
  createBooking, getBookingsByUser
} = require('./models/bookings');
const {
  getActiveFeedbackRequests, setAdminResponse,
  closeFeedbackRequest, getFeedbackUser
} = require('./models/feedback');

const bot = new TelegramBot(process.env.TELEGRAM_TOKEN, { polling: true });

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
const adminTemp = {};
const addServiceTemp = {};
const addSlotTemp = {};
const editSlotTemp = {}; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞
const editServiceTemp = {}; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥
const paginationTemp = {}; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (err) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
  logAction(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`);
  notifyAdmins(`üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${err.message}`);
});

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
function logAction(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}\n`;
  fs.appendFileSync('logs.txt', logMessage);
}

// –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async function notifyAdmins(message) {
  try {
    const admins = await db.query('SELECT telegram_id FROM users WHERE role = $1', ['admin']);
    for (const admin of admins.rows) {
      if (admin.telegram_id) {
        await bot.sendMessage(admin.telegram_id, message);
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:', err);
    logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: ${err.message}`);
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
function validateDateTime(date, time) {
  const dateTime = new Date(`${date}T${time}:00`);
  if (isNaN(dateTime.getTime())) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú');
  }
  return true;
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDateTime(dateStr, timeStr) {
  if (typeof dateStr !== 'string' || !dateStr.trim() || typeof timeStr !== 'string' || !timeStr.trim()) {
    logAction(`–û—à–∏–±–∫–∞: –ø—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - dateStr=${dateStr}, timeStr=${timeStr}`);
    return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è';
  }
  try {
    const [year, month, day] = dateStr.split('-').map(Number);
    if (!year || !month || !day || year < 2000 || month < 1 || month > 12 || day < 1 || day > 31) {
      logAction(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: ${dateStr}`);
      return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞';
    }
    const formattedDate = `${day.toString().padStart(2, '0')}-${month.toString().padStart(2, '0')}-${year}`;

    const timeParts = timeStr.split(':');
    const hours = parseInt(timeParts[0], 10);
    const minutes = parseInt(timeParts[1], 10);
    if (isNaN(hours) || isNaN(minutes) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
      logAction(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: ${timeStr}`);
      return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è';
    }
    const formattedTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
    return `${formattedDate} ${formattedTime}`;
  } catch (err) {
    logAction(`–û—à–∏–±–∫–∞ –≤ formatDateTime: ${err.message}, dateStr=${dateStr}, timeStr=${timeStr}`);
    return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è';
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
async function checkExpiredBookings() {
  try {
    const bookings = await db.query(`
      SELECT b.id, b.user_id, s.id as slot_id, s.date, s.time, s.specialist_id
      FROM bookings b
      JOIN slots s ON b.slot_id = s.id
      WHERE s.is_booked = TRUE
    `);
    const now = new Date();

    for (const booking of bookings.rows) {
      const slotDateTime = new Date(`${booking.date}T${booking.time}:00`);
      if (now > slotDateTime) {
        await db.query(
          'INSERT INTO booking_history (user_id, slot_id, specialist_id, created_at, closed_at) VALUES ($1, $2, $3, $4, $5)',
          [booking.user_id, booking.slot_id, booking.specialist_id, booking.created_at || now, now]
        );
        await db.query('DELETE FROM bookings WHERE id = $1', [booking.id]);
        await db.query('UPDATE slots SET is_booked = FALSE WHERE id = $1', [booking.slot_id]);
        const user = await db.query('SELECT telegram_id FROM users WHERE id = $1', [booking.user_id]);
        if (user.rows[0]?.telegram_id) {
          bot.sendMessage(user.rows[0].telegram_id, '‚è∞ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –∏—Å—Ç–µ–∫–ª–∞ –∏ –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç–∞.');
        }
        logAction(`–ó–∞–ø–∏—Å—å #${booking.id} –∏—Å—Ç–µ–∫–ª–∞ –∏ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.`);
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π:', err);
    logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: ${err.message}`);
    notifyAdmins(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π: ${err.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async function sendReminders() {
  try {
    const bookings = await db.query(`
      SELECT b.id, b.user_id, s.id as slot_id, s.date, s.time, sp.specialization
      FROM bookings b
      JOIN slots s ON b.slot_id = s.id
      JOIN specialists sp ON s.specialist_id = sp.id
      WHERE s.is_booked = TRUE
    `);
    const now = new Date();

    for (const booking of bookings.rows) {
      const slotDateTime = new Date(`${booking.date}T${booking.time}:00`);
      const timeDiffHours = (slotDateTime - now) / (1000 * 60 * 60);

      if (timeDiffHours > 23 && timeDiffHours <= 24) {
        const user = await db.query('SELECT telegram_id FROM users WHERE id = $1', [booking.user_id]);
        if (user.rows[0]?.telegram_id) {
          bot.sendMessage(user.rows[0].telegram_id,
            `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –∑–∞–ø–∏—Å—å –∑–∞–≤—Ç—Ä–∞ –≤ ${formatDateTime(booking.date, booking.time)} –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É (${booking.specialization}).`);
        }
        logAction(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ #${booking.id}.`);
      } else if (timeDiffHours > 0 && timeDiffHours <= 1) {
        const user = await db.query('SELECT telegram_id FROM users WHERE id = $1', [booking.user_id]);
        if (user.rows[0]?.telegram_id) {
          bot.sendMessage(user.rows[0].telegram_id,
            `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —É –≤–∞—Å –∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ —á–∞—Å –≤ ${formatDateTime(booking.date, booking.time)} –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É (${booking.specialization}).`);
        }
        logAction(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ #${booking.id}.`);
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', err);
    logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${err.message}`);
    notifyAdmins(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${err.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞–º–∏
async function manageSlots() {
  try {
    const now = new Date();
    const specialists = await getAllSpecialists();

    // –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–ª–æ—Ç–æ–≤ —Å –∑–∞–ø–∞—Å–æ–º –≤ 5 –º–∏–Ω—É—Ç
    const currentDate = now.toISOString().split('T')[0];
    let currentHours = parseInt(now.toTimeString().split(' ')[0].split(':')[0]);
    let currentMinutes = parseInt(now.toTimeString().split(' ')[0].split(':')[1]);
    currentMinutes += 5; // –î–æ–±–∞–≤–ª—è–µ–º 5 –º–∏–Ω—É—Ç
    if (currentMinutes >= 60) {
      currentHours += 1;
      currentMinutes -= 60;
    }
    const currentTime = `${currentHours.toString().padStart(2, '0')}:${currentMinutes.toString().padStart(2, '0')}`;
    const deletedSlots = await db.query(
      'DELETE FROM slots WHERE date < $1 OR (date = $2 AND time < $3) RETURNING id, date, time',
      [currentDate, currentDate, currentTime]
    );
    if (deletedSlots.rows.length > 0) {
      deletedSlots.rows.forEach(slot => {
        logAction(`–£–¥–∞–ª—ë–Ω —Å–ª–æ—Ç #${slot.id} –Ω–∞ ${formatDateTime(slot.date, slot.time)} –∫–∞–∫ –∏—Å—Ç—ë–∫—à–∏–π.`);
      });
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä—ë–¥
    const startDate = new Date(now);
    startDate.setDate(startDate.getDate() + 1); // –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≤—Ç—Ä–∞
    const timesOfDay = ['10:00', '14:00', '18:00']; // –¢—Ä–∏ —Å–ª–æ—Ç–∞ –≤ –¥–µ–Ω—å

    for (let i = 0; i < 7; i++) {
      const newDate = new Date(startDate);
      newDate.setDate(startDate.getDate() + i);
      const dayOfWeek = newDate.getDay(); // 0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 6 - —Å—É–±–±–æ—Ç–∞
      if (dayOfWeek === 0 || dayOfWeek === 6) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ

      const dateStr = newDate.toISOString().split('T')[0];

      for (const specialist of specialists) {
        for (const timeStr of timesOfDay) {
          const existingSlot = await db.query(
            'SELECT id FROM slots WHERE specialist_id = $1 AND date = $2 AND time = $3',
            [specialist.id, dateStr, timeStr]
          );
          if (existingSlot.rows.length === 0) {
            const newSlot = await addSlot(specialist.id, dateStr, timeStr);
            logAction(`–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–ª–æ—Ç #${newSlot.id} –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${specialist.id} –Ω–∞ ${dateStr} ${timeStr}.`);
          }
        }
      }
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞–º–∏:', err);
    logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞–º–∏: ${err.message}`);
    notifyAdmins(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞–º–∏: ${err.message}`);
  }
}

// –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—É—é 1 –º–∏–Ω—É—Ç—É
setInterval(() => {
  checkExpiredBookings();
  manageSlots();
  sendReminders();
}, 1 * 60 * 1000);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStart(msg) {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;
  const name = msg.from.first_name;

  try {
    let user = await db.query('SELECT * FROM users WHERE telegram_id = $1', [telegramId]);
    if (user.rows.length === 0) {
      await db.query('INSERT INTO users (telegram_id, name) VALUES ($1, $2)', [telegramId, name]);
      user = await db.query('SELECT * FROM users WHERE telegram_id = $1', [telegramId]);
    }

    const role = user.rows[0].role || 'client';
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'book' }],
        [{ text: 'üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã', callback_data: 'book' }],
        [{ text: '‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data: 'feedback' }],
        [{ text: 'üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', callback_data: 'my_bookings_view' }],
        ...(role === 'admin' ? [[{ text: '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin_panel' }]] : []),
        ...(role === 'specialist' ? [
          [{ text: 'üóì –ú–æ–∏ —Å–ª–æ—Ç—ã', callback_data: 'my_slots' }],
          [{ text: 'üë• –ú–æ–∏ –∑–∞–ø–∏—Å–∏', callback_data: 'my_clients' }]
        ] : [])
      ]
    };

    await bot.sendMessage(chatId, `üëã –ü—Ä–∏–≤–µ—Ç, ${name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`, {
      reply_markup: keyboard
    });
    logAction(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${name} (ID: ${telegramId}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.`);
  } catch (err) {
    console.error('/start error:', err);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    logAction(`–û—à–∏–±–∫–∞ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}: ${err.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
async function handleAdmin(msg) {
  const telegramId = msg.from.id;
  const chatId = msg.chat.id;
  try {
    const user = await db.query('SELECT role FROM users WHERE telegram_id = $1', [telegramId]);
    if (user.rows[0]?.role === 'admin') {
      bot.sendMessage(chatId, '‚úÖ –í—ã –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      bot.emit('callback_query', {
        data: 'admin_panel',
        from: msg.from,
        message: msg
      });
      logAction(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –≤–æ—à—ë–ª –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`);
    } else {
      bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      logAction(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–æ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.`);
    }
  } catch (err) {
    console.error('/admin error:', err);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    logAction(`–û—à–∏–±–∫–∞ /admin –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}: ${err.message}`);
  }
}

// –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /reset –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–µ—Å—Å–∏–∏
bot.onText(/\/reset/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;
  logAction(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–±—Ä–æ—Å —Å–µ—Å—Å–∏–∏.`);

  try {
    await bot.deleteMessage(chatId, msg.message_id);
    await bot.sendMessage(chatId, '‚úÖ –°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.');
  } catch (err) {
    logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ${telegramId}: ${err.message}`);
    await bot.sendMessage(chatId, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π
async function handleMyBookingsView(chatId, telegramId) {
  try {
    const user = await db.query('SELECT id FROM users WHERE telegram_id = $1', [telegramId]);
    const userId = user.rows[0].id;
    const bookings = await getBookingsByUser(userId);

    if (!bookings.length) return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.');

    for (const b of bookings) {
      const slotDateTime = new Date(`${b.date}T${b.time}:00`);
      const now = new Date();
      if (now > slotDateTime) {
        await db.query(
          'INSERT INTO booking_history (user_id, slot_id, specialist_id, created_at, closed_at) VALUES ($1, $2, $3, $4, $5)',
          [userId, b.slot_id, b.specialist_id, b.created_at || now, now]
        );
        await db.query('DELETE FROM bookings WHERE id = $1', [b.id]);
        await db.query('UPDATE slots SET is_booked = FALSE WHERE id = $1', [b.slot_id]);
        bot.sendMessage(chatId, `‚è∞ –ó–∞–ø–∏—Å—å ${formatDateTime(b.date, b.time)} –∏—Å—Ç–µ–∫–ª–∞ –∏ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.`);
        logAction(`–ó–∞–ø–∏—Å—å #${b.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –∏—Å—Ç–µ–∫–ª–∞ –∏ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.`);
      } else {
        bot.sendMessage(chatId,
          `üìÖ –ó–∞–ø–∏—Å—å: ${formatDateTime(b.date, b.time)}\n–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${b.specialization}`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: `cancel_booking_${b.id}` }]
              ]
            }
          });
      }
    }
    logAction(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏.`);
  } catch (err) {
    console.error('/mybookings_view error:', err);
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π.');
    logAction(`–û—à–∏–±–∫–∞ /mybookings_view –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}: ${err.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mybookings (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
async function handleMyBookings(msg) {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;
  return handleMyBookingsView(chatId, telegramId);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ú–æ–∏ —Å–ª–æ—Ç—ã"
async function handleMySlots(chatId, telegramId, page = 0, messageId = null) {
  const user = await db.query('SELECT id FROM users WHERE telegram_id = $1', [telegramId]);
  const specialistRes = await db.query('SELECT id FROM specialists WHERE user_id = $1', [user.rows[0].id]);
  if (!specialistRes.rows.length) return bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.');

  const specialistId = specialistRes.rows[0].id;
  const slots = await db.query(
    'SELECT id, date, time, is_booked FROM slots WHERE specialist_id = $1 ORDER BY date, time',
    [specialistId]
  );
  if (!slots.rows.length) return bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç —Å–ª–æ—Ç–æ–≤.');

  const now = new Date();
  const currentDate = now.toISOString().split('T')[0];
  const [currentHours, currentMinutes] = now.toTimeString().split(' ')[0].split(':');
  const currentTime = `${currentHours}:${currentMinutes}`;

  logAction(`–°–ª–æ—Ç—ã –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${specialistId}: ${JSON.stringify(slots.rows.map(s => ({ id: s.id, date: s.date, time: s.time, is_booked: s.is_booked })))}`);

  const filteredSlots = [];
  for (const slot of slots.rows) {
    const slotFormattedDate = slot.date;
    const slotFormattedTime = slot.time.slice(0, 5);
    if (
      slotFormattedDate > currentDate ||
      (slotFormattedDate === currentDate && slotFormattedTime >= currentTime)
    ) {
      const isBooked = slot.is_booked === 't' || slot.is_booked === true;
      filteredSlots.push({ ...slot, is_booked: isBooked });
    }
  }

  if (!filteredSlots.length) return bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –±—É–¥—É—â–µ–µ.');

  const slotsPerPage = 5;
  const totalPages = Math.ceil(filteredSlots.length / slotsPerPage);
  page = Math.max(0, Math.min(page, totalPages - 1));

  const startIndex = page * slotsPerPage;
  const endIndex = Math.min(startIndex + slotsPerPage, filteredSlots.length);
  const currentSlots = filteredSlots.slice(startIndex, endIndex);

  let message = `–û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É, [${new Date().toLocaleString('ru-RU')}] (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages})`;
  for (const slot of currentSlots) {
    const isBooked = slot.is_booked;
    const status = isBooked ? '–ó–∞–Ω—è—Ç' : '–°–≤–æ–±–æ–¥–µ–Ω';
    message += `\nüìÖ ${formatDateTime(slot.date, slot.time)} ‚Äî ${status}`;
  }

  const keyboard = {
    inline_keyboard: [
      ...currentSlots.map(slot => {
        const isBooked = slot.is_booked;
        return [
          ...(isBooked ? [] : [
            { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit_slot_${slot.id}` },
            { text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_slot_${slot.id}` }
          ])
        ].filter(row => row.length > 0);
      }),
      totalPages > 1 ? [
        ...(page > 0 ? [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `my_slots_page_${page - 1}` }] : []),
        ...(page < totalPages - 1 ? [{ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: `my_slots_page_${page + 1}` }] : [])
      ] : []
    ]
  };

  if (messageId) {
    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      reply_markup: keyboard
    });
  } else {
    const sentMessage = await bot.sendMessage(chatId, message, { reply_markup: keyboard });
    messageId = sentMessage.message_id;
  }

  paginationTemp[chatId] = { specialistId, page, messageId };
  logAction(`–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ${telegramId} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–≤–æ–∏ —Å–ª–æ—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}/${totalPages}): ${JSON.stringify(currentSlots.map(s => ({ id: s.id, date: s.date, time: s.time, is_booked: s.is_booked })))}`);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ú–æ–∏ –∑–∞–ø–∏—Å–∏" (–¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤)
async function handleMyClients(chatId, telegramId) {
  const user = await db.query('SELECT id FROM users WHERE telegram_id = $1', [telegramId]);
  const specialistRes = await db.query('SELECT id FROM specialists WHERE user_id = $1', [user.rows[0].id]);
  if (!specialistRes.rows.length) return bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.');

  const specialistId = specialistRes.rows[0].id;
  const bookingsRes = await db.query(`
    SELECT b.id, u.name AS client_name, s.date, s.time
    FROM bookings b
    JOIN slots s ON b.slot_id = s.id
    JOIN users u ON b.user_id = u.id
    WHERE s.specialist_id = $1
    ORDER BY s.date, s.time
  `, [specialistId]);

  const bookings = bookingsRes.rows;
  if (!bookings.length) return bot.sendMessage(chatId, '–ö –≤–∞–º –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è.');

  for (const b of bookings) {
    await bot.sendMessage(chatId, `üë§ ${b.client_name}\nüìÖ ${formatDateTime(b.date, b.time)}`);
  }
  logAction(`–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ${telegramId} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏.`);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
async function handleBook(chatId) {
  const specialists = await getAllSpecialists();
  if (!specialists.length) return bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.');

  const buttons = specialists.map(s => [{
    text: `${s.name} ‚Äî ${s.specialization}`,
    callback_data: `select_specialist_${s.id}`
  }]);

  return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:', {
    reply_markup: { inline_keyboard: buttons }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
async function handleSelectSpecialist(chatId, data) {
  const parts = data.split('_');
  if (parts.length !== 3 || parts[0] !== 'select' || parts[1] !== 'specialist') {
    logAction(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç data –≤ handleSelectSpecialist: ${data}`);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    return;
  }

  const specialistId = parseInt(parts[2], 10);
  if (isNaN(specialistId)) {
    logAction(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π specialistId –≤ handleSelectSpecialist: ${parts[2]}`);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    return;
  }

  try {
    const servicesRes = await db.query('SELECT * FROM services WHERE specialist_id = $1', [specialistId]);
    const services = servicesRes.rows;
    if (!services.length) {
      await bot.sendMessage(chatId, '–£ —ç—Ç–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥.');
      logAction(`–ù–µ—Ç —É—Å–ª—É–≥ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${specialistId}.`);
      return;
    }

    const keyboard = {
      inline_keyboard: services.map(s => [{ text: s.name, callback_data: `select_service_${specialistId}_${s.id}` }])
    };

    logAction(`–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ —É—Å–ª—É–≥ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${specialistId}: ${JSON.stringify(keyboard.inline_keyboard)}`);
    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:', { reply_markup: keyboard });
  } catch (err) {
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    logAction(`–û—à–∏–±–∫–∞ –≤ handleSelectSpecialist –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${specialistId}: ${err.message}`);
    await notifyAdmins(`üö® –û—à–∏–±–∫–∞ –≤ handleSelectSpecialist: ${err.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
async function handleSelectService(chatId, data, messageId = null) {
  const parts = data.split('_');
  let specialistId, serviceId, page = 0;

  if (parts[0] === 'select' && parts[1] === 'service') {
    if (parts.length !== 4) {
      logAction(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç data –≤ handleSelectService: ${data}`);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }
    specialistId = parseInt(parts[2], 10);
    serviceId = parseInt(parts[3], 10);
  } else if (parts[0] === 'page') {
    if (parts.length !== 4) {
      logAction(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç data –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ handleSelectService: ${data}`);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }
    page = parseInt(parts[1], 10);
    specialistId = parseInt(parts[2], 10);
    serviceId = parseInt(parts[3], 10);
  } else {
    logAction(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç data –≤ handleSelectService: ${data}`);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    return;
  }

  if (isNaN(specialistId) || isNaN(serviceId)) {
    logAction(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ handleSelectService: specialistId=${parts[2]}, serviceId=${parts[3]}`);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    return;
  }

  try {
    const slotsRes = await db.query(`
      SELECT s.id, s.date, s.time
      FROM slots s
      WHERE s.specialist_id = $1 AND s.is_booked = FALSE
      ORDER BY s.date, s.time
    `, [specialistId]);

    const slots = slotsRes.rows;
    if (!slots.length) {
      await bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏.');
      logAction(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${specialistId}.`);
      return;
    }

    logAction(`–°–ª–æ—Ç—ã –¥–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${specialistId}: ${JSON.stringify(slots)}`);

    const now = new Date();
    const currentDate = now.toISOString().split('T')[0];
    const [currentHours, currentMinutes] = now.toTimeString().split(' ')[0].split(':');
    const currentTime = `${currentHours}:${currentMinutes}`;

    const filteredSlots = slots.filter(slot => {
      const slotFormattedDate = slot.date;
      const slotFormattedTime = slot.time.slice(0, 5);
      return (
        slotFormattedDate > currentDate ||
        (slotFormattedDate === currentDate && slotFormattedTime >= currentTime)
      );
    });

    if (!filteredSlots.length) {
      await bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –±—É–¥—É—â–µ–µ.');
      logAction(`–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –±—É–¥—É—â–µ–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${specialistId}.`);
      return;
    }

    logAction(`–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${specialistId}: ${JSON.stringify(filteredSlots)}`);

    const slotsPerPage = 10;
    const totalPages = Math.ceil(filteredSlots.length / slotsPerPage);
    page = Math.max(0, Math.min(page, totalPages - 1));

    const startIndex = page * slotsPerPage;
    const endIndex = Math.min(startIndex + slotsPerPage, filteredSlots.length);
    const currentSlots = filteredSlots.slice(startIndex, endIndex);

    const keyboard = {
      inline_keyboard: [
        ...currentSlots.map(slot => [
          {
            text: `${formatDateTime(slot.date, slot.time)}`,
            callback_data: `select_slot_${specialistId}_${serviceId}_${slot.id}`
          }
        ]),
        totalPages > 1 ? [
          ...(page > 0 ? [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: `page_${page - 1}_${specialistId}_${serviceId}` }] : []),
          ...(page < totalPages - 1 ? [{ text: '‚û°Ô∏è –î–∞–ª–µ–µ', callback_data: `page_${page + 1}_${specialistId}_${serviceId}` }] : [])
        ] : []
      ]
    };

    logAction(`–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1}/${totalPages}): ${JSON.stringify(keyboard.inline_keyboard)}`);

    const messageText = `–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages}):`;
    if (messageId) {
      await bot.editMessageText(messageText, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: keyboard
      });
    } else {
      const message = await bot.sendMessage(chatId, messageText, { reply_markup: keyboard });
      messageId = message.message_id;
    }

    paginationTemp[chatId] = { specialistId, serviceId, page, messageId };
  } catch (err) {
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    logAction(`–û—à–∏–±–∫–∞ –≤ handleSelectService –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${specialistId}: ${err.message}`);
    await notifyAdmins(`üö® –û—à–∏–±–∫–∞ –≤ handleSelectService: ${err.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
async function handleSelectSlot(chatId, telegramId, data) {
  const parts = data.split('_');
  if (parts.length !== 5 || parts[0] !== 'select' || parts[1] !== 'slot') {
    logAction(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç data –≤ handleSelectSlot: ${data}`);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
      reply_markup: {
        inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'book' }]]
      }
    });
    return;
  }

  const specialistId = parseInt(parts[2], 10);
  const serviceId = parseInt(parts[3], 10);
  const slotId = parseInt(parts[4], 10);

  if (isNaN(specialistId) || isNaN(serviceId) || isNaN(slotId)) {
    logAction(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ handleSelectSlot: specialistId=${parts[2]}, serviceId=${parts[3]}, slotId=${parts[4]}`);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
      reply_markup: {
        inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'book' }]]
      }
    });
    return;
  }

  try {
    await db.query('BEGIN');

    const slotRes = await db.query(
      'SELECT date, time, is_booked FROM slots WHERE id = $1 FOR UPDATE',
      [slotId]
    );

    if (!slotRes.rows.length) {
      await db.query('ROLLBACK');
      await bot.sendMessage(chatId, '–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.', {
        reply_markup: {
          inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'book' }]]
        }
      });
      logAction(`–°–ª–æ—Ç #${slotId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}.`);
      return;
    }

    const slot = slotRes.rows[0];
    const isBooked = slot.is_booked === 't' || slot.is_booked === true;

    if (isBooked) {
      await db.query('ROLLBACK');
      await bot.sendMessage(chatId, '–≠—Ç–æ—Ç —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.', {
        reply_markup: {
          inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'book' }]]
        }
      });
      logAction(`–°–ª–æ—Ç #${slotId} —É–∂–µ –∑–∞–Ω—è—Ç –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}.`);
      return;
    }

    const user = await db.query('SELECT id, name FROM users WHERE telegram_id = $1', [telegramId]);
    if (!user.rows.length) {
      await db.query('ROLLBACK');
      await bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    const specialist = await db.query(
      'SELECT s.user_id, u.name AS specialist_name ' +
      'FROM specialists s ' +
      'JOIN users u ON s.user_id = u.id ' +
      'WHERE s.id = $1',
      [specialistId]
    );
    if (!specialist.rows.length) {
      await db.query('ROLLBACK');
      await bot.sendMessage(chatId, '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    const clientName = user.rows[0].name || '–ê–Ω–æ–Ω–∏–º';
    const specialistName = specialist.rows[0].specialist_name || '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç';

    await db.query('INSERT INTO bookings (user_id, slot_id) VALUES ($1, $2)', [user.rows[0].id, slotId]);
    await db.query('UPDATE slots SET is_booked = TRUE WHERE id = $1', [slotId]);
    await db.query('COMMIT');

    const formattedDateTime = formatDateTime(slot.date, slot.time);
    await bot.sendMessage(chatId, `–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã! üìÖ ${formattedDateTime} –∫ ${specialistName}`, {
      reply_markup: {
        inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'book' }]]
      }
    });
    logAction(`–ö–ª–∏–µ–Ω—Ç ${telegramId} (${clientName}) –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ —Å–ª–æ—Ç #${slotId} –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É #${specialistId} (${specialistName}).`);

    const specialistUser = await db.query('SELECT telegram_id FROM users WHERE id = $1', [specialist.rows[0].user_id]);
    if (specialistUser.rows.length) {
      await bot.sendMessage(specialistUser.rows[0].telegram_id, `–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: üìÖ ${formattedDateTime} –æ—Ç ${clientName}`);
    }
    await notifyAdmins(`–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å: –ö–ª–∏–µ–Ω—Ç ${clientName} –∑–∞–ø–∏—Å–∞–ª—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ${specialistName} (#${specialistId}) –Ω–∞ ${formattedDateTime}.`);
  } catch (err) {
    await db.query('ROLLBACK');
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {
      reply_markup: {
        inline_keyboard: [[{ text: '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', callback_data: 'book' }]]
      }
    });
    logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} –Ω–∞ —Å–ª–æ—Ç #${slotId}: ${err.message}`);
    await notifyAdmins(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–ª–æ—Ç #${slotId}: ${err.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
async function handleFeedback(chatId, userId) {
  bot.sendMessage(chatId, '‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:');
  bot.once('message', async (msg) => {
    const feedbackText = msg.text;
    await db.query(
      'INSERT INTO feedback_requests (user_id, message, status) VALUES ($1, $2, $3)',
      [userId, feedbackText, '–Ω–æ–≤–∞—è']
    );
    bot.sendMessage(chatId, '‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.');
    logAction(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–ø—Ä–∞–≤–∏–ª –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å: ${feedbackText}`);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async function handleAdminPanel(chatId, role) {
  if (role !== 'admin') return bot.sendMessage(chatId, '‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');

  const buttons = [
    [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞', callback_data: 'admin_add_specialist' }],
    [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É', callback_data: 'admin_add_service' }],
    [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç', callback_data: 'admin_add_slot' }],
    [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏', callback_data: 'admin_edit_services' }],
    [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin_stats' }]
  ];

  const feedbacks = await getActiveFeedbackRequests();
  for (const f of feedbacks) {
    await bot.sendMessage(chatId, `#${f.id} ‚Äî ${f.message} [${f.status}]`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data: `admin_reply_${f.id}` }],
          [{ text: '–ó–∞–∫—Ä—ã—Ç—å', callback_data: `admin_close_${f.id}` }]
        ]
      }
    });
  }

  return bot.sendMessage(chatId, '‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', {
    reply_markup: { inline_keyboard: buttons }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
async function handleAdminAddSpecialist(chatId) {
  adminTemp[chatId] = {};
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ telegram_id —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:');
  bot.once('message', async (msg) => {
    const telegramId = parseInt(msg.text);
    if (isNaN(telegramId)) {
      return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π telegram_id. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
    const userCheck = await db.query('SELECT id FROM users WHERE telegram_id = $1', [telegramId]);
    if (userCheck.rows.length > 0) {
      return bot.sendMessage(chatId, '‚ùå –≠—Ç–æ—Ç telegram_id —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.');
    }
    adminTemp[chatId].telegramId = telegramId;

    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:');
    bot.once('message', (msg) => {
      adminTemp[chatId].name = msg.text;
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é:');
      bot.once('message', (msg2) => {
        adminTemp[chatId].specialization = msg2.text;
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:');
        bot.once('message', async (msg3) => {
          try {
            const userRes = await db.query('INSERT INTO users (telegram_id, name, role) VALUES ($1, $2, $3) RETURNING id',
              [adminTemp[chatId].telegramId, adminTemp[chatId].name, 'specialist']);
            const userId = userRes.rows[0].id;

            const spec = await insertSpecialist(userId, adminTemp[chatId].specialization, msg3.text);
            adminTemp[chatId].specialistId = spec.id;

            bot.sendMessage(chatId, '‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é —É—Å–ª—É–≥—É:');
            bot.once('message', async (msg4) => {
              try {
                await addService(spec.id, msg4.text);
                bot.sendMessage(chatId, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ—Ç (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):');
                bot.once('message', async (msg5) => {
                  try {
                    const [date, time] = msg5.text.split(' ');
                    validateDateTime(date, time);
                    await addSlot(spec.id, date, time);
                    bot.sendMessage(chatId, '‚úÖ –°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.');
                    logAction(`–ê–¥–º–∏–Ω ${chatId} –¥–æ–±–∞–≤–∏–ª —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${spec.id} –∏ —Å–ª–æ—Ç –Ω–∞ ${date} ${time}.`);
                  } catch (err) {
                    bot.sendMessage(chatId, `‚ùå ${err.message}`);
                    logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º ${chatId}: ${err.message}`);
                  }
                });
              } catch (err) {
                bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.');
                logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏ –∞–¥–º–∏–Ω–æ–º ${chatId}: ${err.message}`);
              }
            });
          } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:', err);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.');
            logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–æ–º ${chatId}: ${err.message}`);
          }
        });
      });
    });
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
async function handleAdminAddService(chatId) {
  const specs = await getAllSpecialists();
  const buttons = specs.map(s => [{
    text: `${s.name} ‚Äî ${s.specialization}`,
    callback_data: `service_for_${s.id}`
  }]);

  return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:', {
    reply_markup: { inline_keyboard: buttons }
  });
}

async function handleServiceFor(chatId, data) {
  const specialistId = parseInt(data.split('_').pop(), 10);
  addServiceTemp[chatId] = specialistId;
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –¥–∞—Ç):');
  bot.once('message', async (msg) => {
    const serviceName = msg.text.trim();
    // –í–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –¥–∞—Ç–æ–π
    const isValidName = /^[a-zA-Z–∞-—è–ê-–Ø\s-]+$/.test(serviceName);
    if (!isValidName) {
      bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –¥–µ—Ñ–∏—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      logAction(`–ê–¥–º–∏–Ω ${chatId} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏: ${serviceName}`);
      return;
    }
    try {
      await addService(specialistId, serviceName);
      bot.sendMessage(chatId, '‚úÖ –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.');
      logAction(`–ê–¥–º–∏–Ω ${chatId} –¥–æ–±–∞–≤–∏–ª —É—Å–ª—É–≥—É –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${specialistId}: ${serviceName}`);
    } catch (err) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.');
      logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏ –∞–¥–º–∏–Ω–æ–º ${chatId}: ${err.message}`);
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞
async function handleAdminAddSlot(chatId) {
  const specs = await getAllSpecialists();
  const buttons = specs.map(s => [{
    text: `${s.name} ‚Äî ${s.specialization}`,
    callback_data: `slot_for_${s.id}`
  }]);

  return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:', {
    reply_markup: { inline_keyboard: buttons }
  });
}

async function handleSlotFor(chatId, data) {
  const specialistId = parseInt(data.split('_').pop(), 10);
  addSlotTemp[chatId] = specialistId;
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ—Ç (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):');
  bot.once('message', async (msg) => {
    try {
      const [date, time] = msg.text.split(' ');
      validateDateTime(date, time);
      await addSlot(specialistId, date, time);
      bot.sendMessage(chatId, '‚úÖ –°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω.');
      logAction(`–ê–¥–º–∏–Ω ${chatId} –¥–æ–±–∞–≤–∏–ª —Å–ª–æ—Ç –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${specialistId} –Ω–∞ ${date} ${time}.`);
    } catch (err) {
      bot.sendMessage(chatId, `‚ùå ${err.message}`);
      logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ –∞–¥–º–∏–Ω–æ–º ${chatId}: ${err.message}`);
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥
async function handleEditServices(chatId) {
  const specialists = await getAllSpecialists();
  if (!specialists.length) return bot.sendMessage(chatId, '–ù–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤.');

  const buttons = specialists.map(s => [{
    text: `${s.name} ‚Äî ${s.specialization}`,
    callback_data: `edit_services_for_${s.id}`
  }]);

  return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥:', {
    reply_markup: { inline_keyboard: buttons }
  });
}

async function handleEditServicesFor(chatId, data) {
  const specialistId = parseInt(data.split('_').pop(), 10);
  editServiceTemp[chatId] = { specialistId, currentServiceIndex: 0 };
  const services = await getServicesBySpecialist(specialistId);
  if (!services.length) return bot.sendMessage(chatId, '–£ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–µ—Ç —É—Å–ª—É–≥.');

  const currentService = services[editServiceTemp[chatId].currentServiceIndex];
  bot.sendMessage(chatId, `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ ${editServiceTemp[chatId].currentServiceIndex + 1} –∏–∑ ${services.length}: "${currentService.name}". –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:`);
  bot.once('message', async (msg) => {
    try {
      await updateService(currentService.id, msg.text);
      editServiceTemp[chatId].currentServiceIndex++;
      if (editServiceTemp[chatId].currentServiceIndex < services.length) {
        const nextService = services[editServiceTemp[chatId].currentServiceIndex];
        bot.sendMessage(chatId, `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ ${editServiceTemp[chatId].currentServiceIndex + 1} –∏–∑ ${services.length}: "${nextService.name}". –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:`);
        bot.once('message', (msg2) => {
          handleEditServiceRecursively(chatId, services, msg2.text);
        });
      } else {
        bot.sendMessage(chatId, '‚úÖ –í—Å–µ —É—Å–ª—É–≥–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã.');
        delete editServiceTemp[chatId];
        logAction(`–ê–¥–º–∏–Ω ${chatId} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —É—Å–ª—É–≥–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ #${specialistId}.`);
      }
    } catch (err) {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.');
      logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏ –∞–¥–º–∏–Ω–æ–º ${chatId}: ${err.message}`);
    }
  });
}

async function handleEditServiceRecursively(chatId, services, newName) {
  const currentService = services[editServiceTemp[chatId].currentServiceIndex];
  try {
    await updateService(currentService.id, newName);
    editServiceTemp[chatId].currentServiceIndex++;
    if (editServiceTemp[chatId].currentServiceIndex < services.length) {
      const nextService = services[editServiceTemp[chatId].currentServiceIndex];
      bot.sendMessage(chatId, `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ ${editServiceTemp[chatId].currentServiceIndex + 1} –∏–∑ ${services.length}: "${nextService.name}". –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:`);
      bot.once('message', (msg) => {
        handleEditServiceRecursively(chatId, services, msg.text);
      });
    } else {
      bot.sendMessage(chatId, '‚úÖ –í—Å–µ —É—Å–ª—É–≥–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã.');
      delete editServiceTemp[chatId];
    }
  } catch (err) {
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.');
    logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏ –∞–¥–º–∏–Ω–æ–º ${chatId}: ${err.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—Ç–∞
async function handleEditSlot(chatId, data) {
  const slotId = parseInt(data.split('_').pop(), 10);
  editSlotTemp[chatId] = { slotId };
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):');
  bot.once('message', async (msg) => {
    try {
      const [date, time] = msg.text.split(' ');
      validateDateTime(date, time);
      await updateSlot(slotId, date, time);
      bot.sendMessage(chatId, '‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω.');
      logAction(`–°–ª–æ—Ç #${slotId} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ ${date} ${time}.`);
    } catch (err) {
      bot.sendMessage(chatId, `‚ùå ${err.message}`);
      logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞ #${slotId}: ${err.message}`);
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞
async function handleDeleteSlot(chatId, data) {
  const slotId = parseInt(data.split('_').pop(), 10);
  try {
    await deleteSlot(slotId);
    bot.sendMessage(chatId, '‚úÖ –°–ª–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.');
    logAction(`–°–ª–æ—Ç #${slotId} —É–¥–∞–ª—ë–Ω.`);
  } catch (err) {
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞.');
    logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ #${slotId}: ${err.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–∞—è–≤–∫—É
async function handleAdminReply(chatId, data) {
  const requestId = parseInt(data.split('_').pop(), 10);
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:');
  bot.once('message', async (msg) => {
    const response = msg.text;
    await setAdminResponse(requestId, response);
    const feedbackUserId = await getFeedbackUser(requestId);
    if (feedbackUserId) {
      const feedbackUser = await db.query('SELECT telegram_id FROM users WHERE id = $1', [feedbackUserId]);
      if (feedbackUser.rows[0]?.telegram_id) {
        bot.sendMessage(feedbackUser.rows[0].telegram_id, `‚úâÔ∏è –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${response}`);
      }
    }
    bot.sendMessage(chatId, '‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
    logAction(`–ê–¥–º–∏–Ω ${chatId} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –∑–∞—è–≤–∫—É #${requestId}: ${response}`);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞—è–≤–∫–∏
async function handleAdminClose(chatId, data) {
  const requestId = parseInt(data.split('_').pop(), 10);
  await closeFeedbackRequest(requestId);
  bot.sendMessage(chatId, '‚úÖ –ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.');
  logAction(`–ê–¥–º–∏–Ω ${chatId} –∑–∞–∫—Ä—ã–ª –∑–∞—è–≤–∫—É #${requestId}.`);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
async function handleCancelBooking(chatId, telegramId, data) {
  const bookingId = parseInt(data.split('_').pop(), 10);
  try {
    const user = await db.query('SELECT id FROM users WHERE telegram_id = $1', [telegramId]);
    const userId = user.rows[0].id;
    const booking = await db.query('SELECT slot_id FROM bookings WHERE id = $1 AND user_id = $2', [bookingId, userId]);
    if (!booking.rows.length) {
      return bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å.');
    }

    const slotId = booking.rows[0].slot_id;
    await db.query('DELETE FROM bookings WHERE id = $1', [bookingId]);
    await db.query('UPDATE slots SET is_booked = FALSE WHERE id = $1', [slotId]);
    bot.sendMessage(chatId, '‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    logAction(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –æ—Ç–º–µ–Ω–∏–ª –∑–∞–ø–∏—Å—å #${bookingId}.`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏:', err);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏.');
    logAction(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ #${bookingId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${telegramId}: ${err.message}`);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function handleAdminStats(chatId) {
  const [
    specialists, clients, totalBookings,
    todayBookings, totalSlots, bookedSlots
  ] = await Promise.all([
    db.query(`SELECT COUNT(*) FROM users WHERE role = 'specialist'`),
    db.query(`SELECT COUNT(*) FROM users WHERE role = 'client' OR role IS NULL`),
    db.query(`SELECT COUNT(*) FROM bookings`),
    db.query(`
      SELECT COUNT(*) 
      FROM bookings b 
      JOIN slots s ON b.slot_id = s.id 
      WHERE DATE(s.date) = CURRENT_DATE
    `),
    db.query(`SELECT COUNT(*) FROM slots`),
    db.query(`SELECT COUNT(*) FROM slots WHERE is_booked = TRUE`)
  ]);

  const statsText = `
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

üë®‚Äç‚öïÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: ${specialists.rows[0].count}
üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: ${clients.rows[0].count}
üìÖ –ó–∞–ø–∏—Å–µ–π –≤—Å–µ–≥–æ: ${totalBookings.rows[0].count}
üìÜ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: ${todayBookings.rows[0].count}
üîí –°–ª–æ—Ç–æ–≤ –∑–∞–Ω—è—Ç–æ: ${bookedSlots.rows[0].count}
üîì –°–ª–æ—Ç–æ–≤ —Å–≤–æ–±–æ–¥–Ω–æ: ${totalSlots.rows[0].count - bookedSlots.rows[0].count}
`.trim();

  bot.sendMessage(chatId, statsText);
  logAction(`–ê–¥–º–∏–Ω ${chatId} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.`);
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const telegramId = query.from.id;
  const data = query.data;
  const messageId = query.message.message_id;

  logAction(`–ü–æ–ª—É—á–µ–Ω callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}: data=${data}`);

  try {
    const user = await db.query('SELECT * FROM users WHERE telegram_id = $1', [telegramId]);
    if (!user.rows.length) {
      await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.');
      logAction(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);
      return;
    }

    const userId = user.rows[0].id;
    const role = user.rows[0].role || 'client';

    if (data === 'my_slots') return handleMySlots(chatId, telegramId, 0, messageId);
    if (data.startsWith('my_slots_page_')) {
      const page = parseInt(data.split('_')[3], 10);
      return handleMySlots(chatId, telegramId, page, messageId);
    }
    if (data === 'my_clients') return handleMyClients(chatId, telegramId);
    if (data === 'book') return handleBook(chatId);
    if (data.startsWith('select_specialist_')) return handleSelectSpecialist(chatId, data);
    if (data.startsWith('select_service_') || data.startsWith('page_')) return handleSelectService(chatId, data, messageId);
    if (data.startsWith('select_slot_')) return handleSelectSlot(chatId, telegramId, data);
    if (data === 'feedback') return handleFeedback(chatId, userId);
    if (data === 'admin_panel') return handleAdminPanel(chatId, role);
    if (data === 'admin_add_specialist') return handleAdminAddSpecialist(chatId);
    if (data === 'admin_add_service') return handleAdminAddService(chatId);
    if (data.startsWith('service_for_')) return handleServiceFor(chatId, data);
    if (data === 'admin_add_slot') return handleAdminAddSlot(chatId);
    if (data.startsWith('slot_for_')) return handleSlotFor(chatId, data);
    if (data.startsWith('admin_reply_')) return handleAdminReply(chatId, data);
    if (data.startsWith('admin_close_')) return handleAdminClose(chatId, data);
    if (data.startsWith('cancel_booking_')) return handleCancelBooking(chatId, telegramId, data);
    if (data.startsWith('edit_slot_')) return handleEditSlot(chatId, data);
    if (data.startsWith('delete_slot_')) return handleDeleteSlot(chatId, data);
    if (data === 'admin_edit_services') return handleEditServices(chatId);
    if (data.startsWith('edit_services_for_')) return handleEditServicesFor(chatId, data);
    if (data === 'my_bookings_view') return handleMyBookingsView(chatId, telegramId);
    if (data === 'admin_stats') return handleAdminStats(chatId);

    logAction(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}: ${data}`);
    await bot.sendMessage(chatId, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start.');
  } catch (err) {
    logAction(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query –¥–ª—è data=${data}: ${err.message}`);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start.');
    await notifyAdmins(`üö® –û—à–∏–±–∫–∞ –≤ callback_query –¥–ª—è data=${data}: ${err.message}`);
  }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
bot.onText(/\/slots/, async (msg) => {
  const chatId = msg.chat.id;
  const telegramId = msg.from.id;

  const user = await db.query('SELECT role FROM users WHERE telegram_id = $1', [telegramId]);
  if (user.rows[0]?.role !== 'admin') {
    return bot.sendMessage(chatId, '‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
  }

  try {
    const specialists = await getAllSpecialists();
    for (const specialist of specialists) {
      const slots = await db.query(
        'SELECT id, date, time, is_booked FROM slots WHERE specialist_id = $1 ORDER BY date, time',
        [specialist.id]
      );
      let message = `–û–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É ${specialist.name}, [${new Date().toLocaleString('ru-RU')}]`;
      for (const slot of slots.rows) {
        const isBooked = slot.is_booked === 't' || slot.is_booked === true;
        const status = isBooked ? '–ó–∞–Ω—è—Ç' : '–°–≤–æ–±–æ–¥–µ–Ω';
        message += `\nüìÖ ${formatDateTime(slot.date, slot.time)} ‚Äî ${status}`;
      }
      await bot.sendMessage(chatId, message);
    }
    logAction(`–ê–¥–º–∏–Ω ${telegramId} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ª–æ—Ç—ã.`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤:', err);
    bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ª–æ—Ç–æ–≤.');
    logAction(`–û—à–∏–±–∫–∞ /slots –¥–ª—è –∞–¥–º–∏–Ω–∞ ${telegramId}: ${err.message}`);
  }
});
bot.onText(/\/start/, handleStart);
bot.onText(/\/admin/, handleAdmin);
bot.onText(/\/mybookings/, handleMyBookings);